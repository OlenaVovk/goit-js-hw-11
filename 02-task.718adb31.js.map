{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,S,uCCAA,SAASC,EAAWC,GAClB,OAAOA,EAAKC,KAAI,SAAAC,G,IAAEC,EAAYD,EAAZC,aAAcC,EAAaF,EAAbE,cAAeC,EAAIH,EAAJG,KAAMC,EAAKJ,EAALI,MAAOC,EAAKL,EAALK,MAAOC,EAAQN,EAARM,SAAUC,EAASP,EAATO,U,MAC7E,gEAC2EC,OAAxCN,EAAc,4BAAwDM,OAA9BP,EAAa,mBAAwCO,OAAvBN,EAAc,WAEzDM,OAFkEL,EAAK,sHAGvEK,OADAJ,EAAM,+EAEHI,OADHH,EAAM,kFAEFG,OADDF,EAAS,mFACEE,OAAVD,EAAU,0C,IAEjEE,KAAK,G,CAGX,SAASC,EAAUZ,EAAMa,GAC9BA,EAAKC,mBAAmB,YAAaf,EAAWC,G,CAG3C,SAASe,EAAaf,EAAMa,GACjCA,EAAKG,UAAYjB,EAAWC,E,CDZ9B,IAGIiB,EAFAC,EAAO,EACPC,EAAc,GAGZC,EAAOC,SAASC,cAAc,QAC9BC,EAAQF,SAASC,cAAc,YAC/BE,EAAYH,SAASC,cAAc,YACnCG,EAAWJ,SAASC,cAAc,aAOlCI,EAAW,IAAIC,sBA2BrB,SAAiBC,EAASC,GACxBD,EAAQE,SAAQ,SAAAC,GACVA,EAAMC,iBACRd,GAAO,EACPe,EAAUd,G,MApCA,CACde,KAAM,KACNC,WAAY,QACZC,UAAW,I,SAwCEH,EAAWI,G,OAAXC,EAASC,MAAAC,KAAAC,U,UAATH,I,OAAAA,EAAfI,EAAA7C,EAAA,CAAA6C,EAAAC,GAAAC,MAAA,SAAAC,EAA0BR,G,IAEhBrC,E,2FAAa8C,EAAAC,SAAaV,EAAKnB,G,UAA/BlB,EAAIgD,EAAAC,KACVhC,EAAMiC,KAAKC,KAAKnD,EAAKoD,UAxDR,IA0DRpD,EAAKqD,KAAKC,OAAM,C,uBACnBZ,EAAAa,GAASC,OAAOC,QAAQ,4EACxBlC,EAAMP,UAAY,GAClBQ,EAAUkC,UAAUC,IAAI,mB,2BAIb,IAATzC,GACFwB,EAAAa,GAASC,OAAOI,QAAQ,oBAAmClD,OAAfV,EAAKoD,UAAU,aAC3DrC,EAAaf,EAAKqD,KAAM9B,GACxBG,EAASmC,QAAQpC,GACjBD,EAAUkC,UAAUC,IAAI,oBAExB/C,EAAUZ,EAAKqD,KAAM9B,GAGnBL,IAASD,IACXO,EAAUkC,UAAUI,OAAO,mBAC3BpC,EAASqC,UAAUtC,I,kDAKrBuC,QAAQC,IAAK,iBAA4BjB,EAAAkB,GAAMC,SAC/CzB,EAAAa,GAASC,OAAOC,QAAQ,gD,2DA7BJlB,MAAAC,KAAAC,U,CApCxBrB,EAAKgD,iBAAiB,UAGtB,SAAmBC,GAIjB,GAHAA,EAAIC,iBACJpD,EAAO,IACPC,EAAckD,EAAIE,cAAcC,SAASC,YAAYC,OAKrB,OAH9BnD,EAAMP,UAAY,GAClBQ,EAAUkC,UAAUC,IAAI,wBACxBjB,EAAAa,GAASC,OAAOC,QAAQ,wCAG1BxB,EAAUd,GACVkD,EAAIE,cAAcI,O,IAbpBtD,SAAS+C,iBAAiB,UAgB1B,WACE,IAAQQ,EAAuBvD,SAASC,cAAc,YAAYuD,kBAAkBC,wBAA5EC,OACRC,OAAOC,SAAS,CACdC,IAAgB,EAAXN,EACLO,SAAU,U","sources":["src/js/02-task.js","src/js/renderMarkup.js"],"sourcesContent":["import '../css/styles.css';\nimport Notiflix from 'notiflix';\nimport * as API from './fetchAPI';\nimport {addImages, insertImages} from './renderMarkup';\n\n\nconst PAGE_SET = 40;\nlet page = 1;\nlet searchQuery = '';\nlet max;\n\nconst form = document.querySelector('form');\nconst divEl = document.querySelector('.gallery');\nconst messageEl = document.querySelector('.message');\nconst targetEl = document.querySelector('.js-guard');\n\nconst options = {\n  root: null,\n  rootMargin: '600px',\n  threshold: 1.0,\n}\nconst observer = new IntersectionObserver(onLoad, options);\n\nform.addEventListener('submit', onSubmit);\ndocument.addEventListener('scroll', updateImg);\n\nfunction onSubmit (evt) {\n  evt.preventDefault();\n  page = 1;\n  searchQuery = evt.currentTarget.elements.searchQuery.value\n  if (!searchQuery) {\n    divEl.innerHTML = '';\n    messageEl.classList.add('visually-hidden');\n    Notiflix.Notify.failure('Введіть будь ласка текст для пошуку!'); \n    return;\n  }\n  fetchData(searchQuery);\n  evt.currentTarget.reset();\n}\n\nfunction updateImg() {\n  const { height: cardHeight } = document.querySelector(\".gallery\").firstElementChild.getBoundingClientRect();\n  window.scrollBy({\n    top: cardHeight*2,\n    behavior: \"smooth\",\n  });\n}\n\nfunction onLoad (entries, observer){\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      page +=1;\n      fetchData(searchQuery);\n    } \n  });\n}\n\n\n\nasync function fetchData (res) {\n  try {\n    const data = await API.fetchAPI(res, page);\n    max = Math.ceil(data.totalHits/PAGE_SET);\n    \n    if (!data.hits.length) {\n      Notiflix.Notify.failure('Sorry, there are no images matching your search query. Please try again.');\n      divEl.innerHTML = '';\n      messageEl.classList.add('visually-hidden');\n      return;\n    }\n    \n    if (page === 1) {\n      Notiflix.Notify.success(`Hooray! We found ${data.totalHits} images.`); \n      insertImages(data.hits, divEl);\n      observer.observe(targetEl);\n      messageEl.classList.add('visually-hidden');\n    } else {\n      addImages(data.hits, divEl);\n    }\n\n    if (page === max) {\n      messageEl.classList.remove('visually-hidden');\n      observer.unobserve(targetEl);\n    }\n  } \n  \n  catch (error) {\n    console.log ('Oй помилочка: ', error.message);\n    Notiflix.Notify.failure('Упсс щось пішло не так... Спробуйте пізніше!');\n  }\n}\n\n\n","function makeMarkup(data) {\n  return data.map(({webformatURL, largeImageURL, tags, likes, views, comments, downloads}) => \n  `<div class=\"photo-card\">\n    <a class=\"gallery__item\" href=\"${largeImageURL}\"><img class=\"img\" src=\"${webformatURL}\" data-source=\"${largeImageURL}\" alt=\"${tags}\" loading=\"lazy\"/></a>\n        <div class=\"info\">\n          <p class=\"info-item\"><span><b>Likes</b></span><span>${likes}</span></p>\n          <p class=\"info-item\"><span><b>Views</b></span><span>${views}</span></p>\n          <p class=\"info-item\"><span><b>Comments</b></span><span>${comments}</span></p>\n          <p class=\"info-item\"><span><b>Downloads</b></span><span>${downloads}</span></p>\n        </div>\n    </div>`).join('');   \n}\n\nexport function addImages(data, elem) {\n  elem.insertAdjacentHTML('beforeend', makeMarkup(data));\n}\n\nexport function insertImages(data, elem) {\n  elem.innerHTML = makeMarkup(data);\n}"],"names":["$bpxeT","parcelRequire","$3a6dece2d99f3b9c$var$makeMarkup","data","map","param","webformatURL","largeImageURL","tags","likes","views","comments","downloads","concat","join","$3a6dece2d99f3b9c$export$8250d5b41185d62d","elem","insertAdjacentHTML","$3a6dece2d99f3b9c$export$1b65cd30569cc42d","innerHTML","$6c6945dbdc778097$var$max","$6c6945dbdc778097$var$page","$6c6945dbdc778097$var$searchQuery","$6c6945dbdc778097$var$form","document","querySelector","$6c6945dbdc778097$var$divEl","$6c6945dbdc778097$var$messageEl","$6c6945dbdc778097$var$targetEl","$6c6945dbdc778097$var$observer","IntersectionObserver","entries","observer","forEach","entry","isIntersecting","$6c6945dbdc778097$var$fetchData","root","rootMargin","threshold","res","$6c6945dbdc778097$var$_fetchData","apply","this","arguments","$parcel$interopDefault","$2TvXO","mark","_callee","$lbRHt","fetchAPI","_ctx","sent","Math","ceil","totalHits","hits","length","$iU1Pc","Notify","failure","classList","add","success","observe","remove","unobserve","console","log","t0","message","addEventListener","evt","preventDefault","currentTarget","elements","searchQuery","value","reset","cardHeight","firstElementChild","getBoundingClientRect","height","window","scrollBy","top","behavior"],"version":3,"file":"02-task.718adb31.js.map"}